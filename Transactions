--Key Concepts of Transactions:
	ACID Properties:

		Atomicity: Ensures that all operations within a transaction are treated as a single unit. Either all operations are completed, or none are.

		Consistency: Ensures that the database remains in a valid state before and after the transaction.

		Isolation: Ensures that concurrent transactions do not interfere with each other.

		Durability: Ensures that once a transaction is committed, the changes are permanent, even in the event of a system failure.

	Transaction Control Statements:

	START TRANSACTION or BEGIN: Begins a new transaction.

	COMMIT: Saves the changes made during the transaction to the database.

	ROLLBACK: Reverts the changes made during the transaction if an error occurs.

	SAVEPOINT: Creates a point within a transaction to which you can roll back.

	SET autocommit: Controls whether changes are automatically committed after each statement.

--Basic Transaction
	--transfers money from one account to another. If any step fails, the entire transaction is rolled back.

	START TRANSACTION;

	-- Deduct amount from the sender's account
	UPDATE accounts
	SET balance = balance - 100
	WHERE id = 1;

	-- Add amount to the receiver's account
	UPDATE accounts
	SET balance = balance + 100
	WHERE id = 2;

	-- Commit the transaction if both updates succeed
	COMMIT;
	Explanation:

	--If either UPDATE statement fails, the transaction is rolled back, and no changes are saved.

	--If both UPDATE statements succeed, the transaction is committed, and the changes are saved.

--Transaction with Rollback
	demonstrates rolling back a transaction if an error occurs.

		START TRANSACTION;

		-- Deduct amount from the sender's account
		UPDATE accounts
		SET balance = balance - 100
		WHERE id = 1;

		-- Simulate an error (e.g., insufficient balance)
		IF (SELECT balance FROM accounts WHERE id = 1) < 0 THEN
		    ROLLBACK;
		ELSE
		    -- Add amount to the receiver's account
		    UPDATE accounts
		    SET balance = balance + 100
		    WHERE id = 2;

		    -- Commit the transaction
		    COMMIT;
		END IF;
		Explanation:

		--If the sender's balance becomes negative, the transaction is rolled back.

		--Otherwise, the transaction is committed.

--Using SAVEPOINT
	uses SAVEPOINT to create a point within a transaction to which you can roll back.

		START TRANSACTION;

		-- Deduct amount from the sender's account
		UPDATE accounts
		SET balance = balance - 100
		WHERE id = 1;

		-- Create a savepoint
		SAVEPOINT savepoint1;

		-- Add amount to the receiver's account
		UPDATE accounts
		SET balance = balance + 100
		WHERE id = 2;

		-- Simulate an error (e.g., invalid receiver account)
		IF (SELECT COUNT(*) FROM accounts WHERE id = 2) = 0 THEN
		    ROLLBACK TO savepoint1;
		END IF;

		-- Commit the transaction
		COMMIT;
		Explanation:

	If the receiver's account does not exist, the transaction rolls back to savepoint1, undoing the second UPDATE.

	The first UPDATE remains intact, and the transaction can be committed.

--Disabling autocommit
	By default, MySQL automatically commits each statement. You can disable autocommit to manually control transactions.

		-- Disable autocommit
		SET autocommit = 0;

		-- Perform operations
		UPDATE accounts
		SET balance = balance - 100
		WHERE id = 1;

		UPDATE accounts
		SET balance = balance + 100
		WHERE id = 2;

		-- Commit the transaction
		COMMIT;

		-- Re-enable autocommit
		SET autocommit = 1;
		Explanation:

	With autocommit disabled, changes are not saved until you explicitly call COMMIT.

	After the transaction, autocommit is re-enabled.

--Nested Transactions
	MySQL does not support nested transactions directly, but you can simulate them using SAVEPOINT.

		START TRANSACTION;

		-- Outer transaction
		UPDATE accounts
		SET balance = balance - 100
		WHERE id = 1;

		-- Inner transaction (simulated with SAVEPOINT)
		SAVEPOINT inner_savepoint;

		UPDATE accounts
		SET balance = balance + 100
		WHERE id = 2;

		-- Rollback inner transaction if needed
		IF (SELECT balance FROM accounts WHERE id = 2) > 1000 THEN
		    ROLLBACK TO inner_savepoint;
		END IF;

		-- Commit the outer transaction
		COMMIT;
		Explanation:

	The SAVEPOINT allows you to roll back part of the transaction without affecting the entire transaction.

--Best Practices for Using Transactions:
	Keep Transactions Short: Long transactions can lock resources and impact performance.

	Handle Errors Gracefully: Use ROLLBACK to undo changes in case of errors.

	Avoid Unnecessary Transactions: Use transactions only when multiple operations need to be atomic.

	Test Thoroughly: Ensure your transactions work as expected in all scenarios.
